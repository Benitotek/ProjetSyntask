
src\Controller\ActivityController.php:20:    public function index(ActivityRepository 
$activityRepository): Response
src\Controller\ActivityController.php:35:    public function all(ActivityRepository 
$activityRepository): Response
src\Controller\ActivityController.php:46:    public function projectActivities(string $id, 
ActivityRepository $activityRepository): Response
src\Controller\ActivityController.php:58:public function activityIndex(ActivityRepository 
$activityRepository): Response
src\Controller\ActivityController.php:71://     public function index(): Response
src\Controller\AdminController.php:26:    public function __construct(EmailVerifier 
$emailVerifier)
src\Controller\AdminController.php:33:    public function newUser(
src\Controller\AdminController.php:66:    public function index(UserRepository 
$userRepository): Response
src\Controller\AdminController.php:79:    public function addUser(Request $request): Response
src\Controller\AdminController.php:92:    public function logout(): Response
src\Controller\AdminController.php:101:    public function Admindashboard(): Response
src\Controller\AdminController.php:118:    public function UserList(UserRepository 
$userRepository): Response
src\Controller\AdminController.php:130:    public function projects(ProjectRepository 
$projectRepository): Response
src\Controller\ApiDashboardController.php:19:    public function activityData(
src\Controller\ApiDashboardController.php:38:    public function recentActivities(
src\Controller\ApiDashboardController.php:64:    public function upcomingDueDates(
src\Controller\ApiDashboardController.php:87:    public function assignedTasks(TaskRepository 
$taskRepository): JsonResponse
src\Controller\ApiKanbanController.php:26:    public function __construct(
src\Controller\ApiKanbanController.php:35:    public function getProjectBoard(int $projectId): 
JsonResponse
src\Controller\ApiKanbanController.php:90:    public function createColumn(Request $request): 
JsonResponse
src\Controller\ApiKanbanController.php:153:    public function updateColumn(int $id, Request 
$request): JsonResponse
src\Controller\ApiKanbanController.php:220:    public function deleteColumn(int $id): 
JsonResponse
src\Controller\ApiKanbanController.php:266:    public function moveTask(int $id, Request 
$request): JsonResponse
src\Controller\ApiKanbanController.php:354:    public function reorderColumns(int $projectId, 
Request $request): JsonResponse
src\Controller\ApiKanbanController.php:399:    public function reorderTasks(int $taskListId, 
Request $request): JsonResponse
src\Controller\ApiKanbanController.php:445:    private function formatTaskListData(TaskList 
$taskList): array
src\Controller\ApiKanbanController.php:472:    private function formatTaskData(Task $task): 
array
src\Controller\ApiKanbanController.php:524:    private function getNextColumnPosition(Project 
$project): int
src\Controller\ApiKanbanController.php:536:    private function getNextTaskPosition(TaskList 
$taskList): int
src\Controller\ApiKanbanController.php:548:    private function updateTaskStatusByColumn(Task 
$task, TaskList $taskList): void
src\Controller\ApiKanbanController.php:579:    private function 
formatValidationErrors($errors): array
src\Controller\ApiProjectController.php:19:    public function __construct(
src\Controller\ApiProjectController.php:30:    public function list(Request $request): 
JsonResponse
src\Controller\ApiProjectController.php:68:    public function indexView(ProjectRepository 
$projectRepository): Response
src\Controller\ApiProjectController.php:81:    public function show(int $id): JsonResponse
src\Controller\ApiProjectController.php:117:    public function create(Request $request): 
JsonResponse
src\Controller\ApiProjectController.php:175:    public function update(int $id, Request 
$request): JsonResponse
src\Controller\ApiProjectController.php:251:    public function delete(int $id): JsonResponse
src\Controller\ApiProjectController.php:290:    public function members(int $id): JsonResponse
src\Controller\ApiProjectController.php:335:    public function addMember(int $id, Request 
$request): JsonResponse
src\Controller\ApiProjectController.php:390:    private function serializeProject(Project 
$project, bool $detailed = false): array
src\Controller\ApiProjectController.php:433:    private function canAccessProject(Project 
$project): bool
src\Controller\ApiProjectController.php:458:    private function canEditProject(Project 
$project): bool
src\Controller\ApiProjectController.php:478:    private function canDeleteProject(Project 
$project): bool
src\Controller\ApiProjectController.php:496:    public function index(): Response
src\Controller\ApiTaskController.php:32:    public function __construct(
src\Controller\ApiTaskController.php:45:    public function list(Request $request): 
JsonResponse
src\Controller\ApiTaskController.php:63:            $tasksData = array_map(function (Task 
$task) {
src\Controller\ApiTaskController.php:83:    public function show(int $id): JsonResponse
src\Controller\ApiTaskController.php:108:    public function create(Request $request): 
JsonResponse
src\Controller\ApiTaskController.php:198:    public function update(int $id, Request 
$request): JsonResponse
src\Controller\ApiTaskController.php:295:    public function delete(int $id): JsonResponse
src\Controller\ApiTaskController.php:332:    public function getComments(int $id): JsonResponse
src\Controller\ApiTaskController.php:366:    public function addComment(int $id, Request 
$request): JsonResponse
src\Controller\ApiTaskController.php:420:    public function addTag(int $id, Request 
$request): JsonResponse
src\Controller\ApiTaskController.php:468:    public function removeTag(int $id, int $tagId): 
JsonResponse
src\Controller\ApiTaskController.php:507:    private function formatTaskData(Task $task, bool 
$detailed = false): array
src\Controller\ApiTaskController.php:559:    private function getNextPosition(TaskList 
$taskList): int
src\Controller\ApiTaskController.php:571:    private function formatValidationErrors($errors): 
array
src\Controller\CalendarController.php:27:    public function __construct(TaskCalendarService 
$calendarService)
src\Controller\CalendarController.php:33:    // public function 
allEmployeeTasks(TaskCalendarService $taskCalendarService): JsonResponse
src\Controller\CalendarController.php:40:    public function 
allTasksCalendarAdmin(TaskCalendarService $calendarService): JsonResponse
src\Controller\CalendarController.php:50:    public function allTasksCalendar(): Response
src\Controller\CalendarController.php:60:    public function userTasks(TaskCalendarService 
$calendarService): JsonResponse
src\Controller\CalendarController.php:68:    public function projectTasks(int $id, 
TaskCalendarService $calendarService): JsonResponse
src\Controller\CalendarController.php:76:    public function index(ProjectRepository 
$projectRepository): Response
src\Controller\CalendarController.php:88:    public function getUserTasks(): Response
src\Controller\CalendarController.php:96:    public function getProjectTasks(Project 
$project): Response
src\Controller\CommentController.php:28:    public function __construct(
src\Controller\CommentController.php:40:public function index(
src\Controller\CommentController.php:72:    public function add(Task $task, Request $request): 
Response
src\Controller\CommentController.php:128:    public function edit(Comment $comment, Request 
$request): Response
src\Controller\CommentController.php:173:    public function delete(Comment $comment, Request 
$request): Response
src\Controller\CommentController.php:209:    private function getFormErrors($form): array
src\Controller\CommentController.php:220:    // public function index(): Response
src\Controller\DashboardController.php:32:    public function index(
src\Controller\DashboardController.php:69:        $completedTasks = 
count(array_filter($allTasks, function ($task) {
src\Controller\DashboardController.php:73:        $pendingTasks = 
count(array_filter($allTasks, function ($task) {
src\Controller\DashboardController.php:77:        $inProgressTasks = 
count(array_filter($allTasks, function ($task) {
src\Controller\DashboardController.php:116:        usort($dueDates, function ($a, $b) {
src\Controller\DashboardController.php:129:                $userCompletedTasks = 
count(array_filter($userTasks, function ($task) {
src\Controller\DashboardController.php:133:                $userOverdueTasks = 
count(array_filter($userTasks, function ($task) {
src\Controller\HomeController.php:12:    public function index(): Response
src\Controller\MemberController.php:23:    public function __construct(
src\Controller\MemberController.php:35:    public function members(Project $project): Response
src\Controller\MemberController.php:59:    public function addMember(Project $project, Request 
$request, UserRepository $userRepository): Response
src\Controller\MemberController.php:113:    public function removeMember(
src\Controller\MemberController.php:186:    public function searchPotentialMembers(Project 
$project, Request $request, UserRepository $userRepository): Response
src\Controller\MemberController.php:220:    public function changeMemberRole(Project $project, 
int $userId, Request $request, UserRepository $userRepository): Response
src\Controller\MemberController.php:297:    // public function index(): Response
src\Controller\NotificationController.php:22:    public function __construct(
src\Controller\NotificationController.php:32:    public function index(NotificationRepository 
$notificationRepository): Response
src\Controller\NotificationController.php:46:    public function markAsRead(Notification 
$notification, Request $request): Response
src\Controller\NotificationController.php:76:    public function markAllAsRead(Request 
$request): Response
src\Controller\NotificationController.php:96:    public function delete(Notification 
$notification, Request $request): Response
src\Controller\NotificationController.php:121:    public function deleteAll(Request $request, 
NotificationRepository $notificationRepository): Response
src\Controller\NotificationController.php:147:    public function 
getUnreadCount(NotificationRepository $notificationRepository): Response
src\Controller\NotificationController.php:157:    public function 
getRecent(NotificationRepository $notificationRepository): Response
src\Controller\NotificationController.php:161:        $formattedNotifications = 
array_map(function ($notification) {
src\Controller\ProjectController.php:25:    public function __construct(
src\Controller\ProjectController.php:30:    public function index(ProjectRepository 
$projectRepository): Response
src\Controller\ProjectController.php:51:    public function mesProjects(Request $request, 
ProjectRepository $projectRepository): Response
src\Controller\ProjectController.php:76:    public function new(Request $request, 
EntityManagerInterface $entityManager): Response
src\Controller\ProjectController.php:102:    public function show(Project $project): Response
src\Controller\ProjectController.php:112:    public function edit(Request $request, Project 
$project, EntityManagerInterface $entityManager): Response
src\Controller\ProjectController.php:132:    public function delete(Request $request, Project 
$project, EntityManagerInterface $entityManager): Response
src\Controller\ProjectController.php:149:    public function kanban(
src\Controller\ProjectController.php:187:    public function manageMembers(
src\Controller\ProjectController.php:220:    public function assignManager(
src\Controller\ProjectController.php:249:    private function createDefaultTaskLists(Project 
$project, EntityManagerInterface $entityManager): void
src\Controller\ProjectController.php:268:    private function handleAddMember(Project 
$project, User $user, EntityManagerInterface $entityManager): void
src\Controller\ProjectController.php:277:    private function handleRemoveMember(Project 
$project, User $user, EntityManagerInterface $entityManager): void
src\Controller\RegistrationController.php:25:    public function __construct(private 
EmailVerifier $emailVerifier) {}
src\Controller\RegistrationController.php:29:    public function register(Request $request, 
UserPasswordHasherInterface $userPasswordHasher, EntityManagerInterface $entityManager): 
Response
src\Controller\RegistrationController.php:57:    public function signup(Request $request, 
UserPasswordHasherInterface $userPasswordHasher, EntityManagerInterface $entityManager): 
Response
src\Controller\RegistrationController.php:82:    public function verifyUserEmail(Request 
$request, TranslatorInterface $translator): Response
src\Controller\ReportController.php:20:    public function teamReport(
src\Controller\ReportController.php:47:                $userTasks = 
array_filter($taskRepository->findByAssignedUser($teamMember), function ($task) use ($project) 
{
src\Controller\ReportController.php:69:                $userTasks = array_filter($userTasks, 
function ($task) use ($date) {
src\Controller\ReportController.php:75:            $userCompletedTasks = 
count(array_filter($userTasks, function ($task) {
src\Controller\ReportController.php:79:            $userOverdueTasks = 
count(array_filter($userTasks, function ($task) {
src\Controller\ReportController.php:91:            $completedTasksWithDates = 
array_filter($userTasks, function ($task) {
src\Controller\ReportController.php:133:        usort($teamPerformance, function ($a, $b) {
src\Controller\ResetPasswordController.php:28:    public function __construct(
src\Controller\ResetPasswordController.php:38:    public function request(Request $request, 
MailerInterface $mailer, TranslatorInterface $translator): Response
src\Controller\ResetPasswordController.php:60:    public function checkEmail(): Response
src\Controller\ResetPasswordController.php:77:    public function reset(Request $request, 
UserPasswordHasherInterface $passwordHasher, TranslatorInterface $translator, ?string $token = 
null): Response
src\Controller\ResetPasswordController.php:132:    private function 
processSendingPasswordResetEmail(string $emailFormData, MailerInterface $mailer, 
TranslatorInterface $translator): RedirectResponse
src\Controller\SecurityController.php:19:    public function 
__construct(CsrfTokenManagerInterface $csrf)
src\Controller\SecurityController.php:32:    public function generateCsrfToken(Request 
$request): JsonResponse
src\Controller\SecurityController.php:46:    public function login(AuthenticationUtils 
$authenticationUtils, Request $request): Response
src\Controller\SecurityController.php:57:    // public function 
login(\Symfony\Component\HttpFoundation\Request $request, AuthenticationUtils 
$authenticationUtils): Response
src\Controller\SecurityController.php:79:    public function logout(): void
src\Controller\SecurityController.php:86:    public function register(): Response
src\Controller\SecurityController.php:95:    public function forgotPassword(Request $request, 
UserRepository $userRepository, MailerInterface $mailer): Response
src\Controller\TagController.php:21:    public function __construct(EntityManagerInterface 
$entityManager)
src\Controller\TagController.php:27:    public function index(TagRepository $tagRepository): 
Response
src\Controller\TagController.php:37:    public function new(Request $request): Response
src\Controller\TagController.php:59:    public function show(Tag $tag): Response
src\Controller\TagController.php:67:    public function edit(Request $request, Tag $tag): 
Response
src\Controller\TagController.php:87:    public function delete(Request $request, Tag $tag): 
Response
src\Controller\TagController.php:106:    public function apiList(TagRepository $tagRepository, 
Request $request): Response
src\Controller\TagController.php:119:        $formattedTags = array_map(function ($tag) {
src\Controller\TagController.php:135:    public function apiCreate(Request $request): Response
src\Controller\TagController.php:173:    public function apiShow(Tag $tag): Response
src\Controller\TagController.php:184:    public function apiDelete(Request $request, Tag 
$tag): Response
src\Controller\TaskController.php:34:    public function index(TaskRepository $taskRepository, 
TaskListRepository $taskListRepository): Response
src\Controller\TaskController.php:54:    //     public function index(TaskRepository 
$taskRepository): Response
src\Controller\TaskController.php:79:    public function ProjetTasks(Project $project, 
TaskRepository $taskRepository): Response
src\Controller\TaskController.php:101:    public function myTasks(TaskRepository 
$taskRepository, EntityManagerInterface $entityManager, PaginatorInterface $paginator, Request 
$request): Response
src\Controller\TaskController.php:126:    public function markCompleted(Task $task, 
EntityManagerInterface $em, ActivityLogger $logger): Response
src\Controller\TaskController.php:141:    public function new(
src\Controller\TaskController.php:171:    public function changeStatus(
src\Controller\TaskController.php:209:    public function show(Task $task): Response
src\Controller\TaskController.php:227:    public function edit(Request $request, Task $task, 
EntityManagerInterface $entityManager): Response
src\Controller\TaskController.php:275:    public function delete(Request $request, Task $task, 
EntityManagerInterface $entityManager): Response
src\Controller\TaskController.php:315:    public function moveTask(
src\Controller\TaskController.php:360:     public function assignUser(
src\Controller\TaskController.php:414:    public function unassignTask(
src\Controller\TaskController.php:443:    private function canViewProject(Project $project): 
bool
src\Controller\TaskController.php:474:    private function canModifyProject($project): bool
src\Controller\TaskController.php:494:    private function canAssignTasks($project): bool
src\Controller\TaskController.php:520://     public function new(
src\Controller\TaskController.php:571://     public function edit(
src\Controller\TaskController.php:616://     public function delete(
src\Controller\TaskController.php:660://     public function assign(
src\Controller\TaskController.php:696://     public function changestatut(
src\Controller\TaskController.php:737://     public function setPriority(
src\Controller\TaskListController.php:30:    // public function kanban(
src\Controller\TaskListController.php:70:    private function createDefaultTaskLists(Project 
$project, EntityManagerInterface $entityManager): void
src\Controller\TaskListController.php:95:    private function canViewProject(Project 
$project): bool
src\Controller\TaskListController.php:126:    public function show(TaskList $taskList): 
Response
src\Controller\TaskListController.php:136:    public function ViewformColumn(
src\Controller\TaskListController.php:191:    public function EditformColumn(
src\Controller\TaskListController.php:233:    public function deleteColumn(
src\Controller\TaskListController.php:260:    public function reorderColumns(
src\Controller\TaskListController.php:304:    public function newColum(
src\Controller\TaskListController.php:365:    public function edit(Request $request, TaskList 
$taskList, EntityManagerInterface $entityManager): Response
src\Controller\TaskListController.php:410:    public function delete(
src\Controller\TaskListController.php:461:    public function DragDropReorderColumns(
src\Controller\TaskListController.php:506:    private function canModifyProject($project): bool
src\Controller\UserController.php:25:    public function index(UserRepository 
$userRepository): Response
src\Controller\UserController.php:39:    public function myProfile(Request $request, 
EntityManagerInterface $em): Response
src\Controller\UserController.php:64:public function new(
src\Controller\UserController.php:104:public function show(User $user): Response
src\Controller\UserController.php:111:    public function edit(Request $request, User $user, 
EntityManagerInterface $entityManager, UserPasswordHasherInterface $passwordHasher): Response
src\Controller\UserController.php:136:    public function delete(Request $request, User $user, 
EntityManagerInterface $entityManager): Response
src\Controller\UserController.php:151:    // public function togglestatut(User $user, 
EntityManagerInterface $entityManager): Response


