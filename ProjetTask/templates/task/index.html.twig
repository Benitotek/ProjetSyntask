{% extends 'base.html.twig' %}
{# Version-2-3 03/07/2025 #}
{% block title %}
	Liste des tâches | SYNTASK
{% endblock %}
{% block stylesheets %}
	{{ parent() }}
	<link	href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"	rel="stylesheet">
		<link	href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"	rel="stylesheet">
			<link	rel="stylesheet"	href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
				<link	rel="stylesheet"	href="{{ asset('styles/dashboard.css') }}">
					<meta	name="csrf-token"	content="{{ csrf_token('task_operations') }}">
					{% endblock %}
					{% block javascripts %}
						{{ parent() }}
						<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
						<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
						<script src="https://cdn.jsdelivr.net/npm/flatpickr/dist/l10n/fr.js"></script>
						<script src="{{ asset('js/dashboard.js') }}"></script>
					{% endblock %}
					{% block body %}
						<div	class="container-fluid py-4">
							<div	class="d-flex justify-content-between align-items-center mb-4">
								<h1>
									Gestion des tâches
								</h1>
								<div	class="d-flex gap-2">
									<div	class="input-group">
										<span	class="input-group-text">
											<i	class="fas fa-search"></i>
										</span>
										<input	type="text"	id="task-search"	class="table-search-input form-control"	data-target="#tasks-table"	placeholder="Rechercher..."></div>
										{% if is_granted('ROLE_CHEF_PROJET') %}
											<a	href="{{ path('app_task_new',{ taskListId: taskList.id }) }}"	class="btn btn-primary">
												<i	class="fas fa-plus"></i>
												Nouvelle tâche
											</a>
										{% endif %}
									</div>
								</div>
								<div	class="card table-card">
									<div	class="card-header">
										<div	class="d-flex justify-content-between align-items-center">
											<h5	class="table-title">
												Mes tâches
											</h5>
											<a	href="{{ path('app_task_my_tasks') }}"	class="btn btn-primary">
												<div	class="table-actions">
													<div	class="btn-group">
														<button	type="button"	class="btn btn-outline-primary statut-filter active"	data-target="#tasks-table"	data-statut="all">
															Toutes
														</button>
														<button	type="button"	class="btn btn-outline-primary statut-filter"	data-target="#tasks-table"	data-statut="EN-ATTENTE">
															En attente
														</button>
														<button	type="button"	class="btn btn-outline-primary statut-filter"	data-target="#tasks-table"	data-statut="EN-COURS">
															En cours
														</button>
														<button	type="button"	class="btn btn-outline-primary statut-filter"	data-target="#tasks-table"	data-statut="TERMINE">
															Terminées
														</button>
													</div>
												</div>
											</div>
										</div>
										<div	class="card-body">
											<div	class="table-responsive">
												<table	class="modern-table"	id="tasks-table">
													<thead>
														<tr>
															<th>
																Titre
															</th>
															<th>
																Projet
															</th>
															<th>
																Statut
															</th>
															<th>
																Priorité
															</th>
															<th>
																Date d'échéance
															</th>
															<th>
																Assignée à
															</th>
															<th>
																Actions
															</th>
														</tr>
													</thead>
													<tbody>
														{% for task in tasks %}
															<tr>
																<td>
																	{{ task.title }}
																</td>
																<td>
																	{% if task.project is not null %}
																		<a	href="{{ path('app_projet_show', {'id': task.project.id}) }}">
																			{{ task.project.titre }}
																		</a>
																	{% else %}
																		<span>
																			Projet non assigné
																		</span>
																	{% endif %}
																</td>
																<td	class="statut-cell"	data-statut="{{ task.statut.value }}">
																	<span	class="badge
																			{% if task.statut == constant('App\\Enum\\TaskStatut::EN_COUR') %} badge-primary
																			{% elseif task.statut == constant('App\\Enum\\TaskStatut::TERMINE') %} badge-success
																			{% elseif task.statut == constant('App\\Enum\\TaskStatut::EN_ATTENTE') %} badge-warning
																			{% else %} badge-secondary
																			{% endif %}
																		">
																		{{ task.statut.label }}
																	</span>
																</td>
																<td>
																	<span	class="badge
																			{% if task.priorite == 'HAUTE' %} badge-danger
																			{% elseif task.priorite == 'MOYENNE' %} badge-warning
																			{% else %} badge-success
																		{% endif %}">
																		{{ task.priorite.value|capitalize }}
																	</span>
																</td>
																<td>
																	{% if task.dateButoir %}
																		{% set isOverdue = task.dateButoir < date() and task.statut != 'TERMINE' %}
																		<span	class="{{ isOverdue ? 'text-danger fw-bold' : '' }}">
																			{{ task.dateButoir|date('d/m/Y') }}
																			{% if isOverdue %}
																				<i	class="fas fa-exclamation-circle ms-1"	title="En retard"></i>
																			{% endif %}
																		</span>
																	{% else %}
																		<span	class="text-muted">
																			Non définie
																		</span>
																	{% endif %}
																</td>
																<td>
																	{% if task.assignedUser %}
																		<div	class="d-flex align-items-center">
																			<div	class="user-avatar me-2">
																				{{ task.assignedUser.prenom|first }}
																				{{ task.assignedUser.nom|first }}
																			</div>
																			<span>
																				{{ task.assignedUser.prenom }}
																				{{ task.assignedUser.nom }}
																			</span>
																		</div>
																	{% else %}
																		<span	class="text-muted">
																			Non assignée
																		</span>
																	{% endif %}
																</tr>
															</td>
															<td>
																<div	class="d-flex">
																	<a	href="{{ path('app_task_show', {'id': task.id}) }}"	class="btn btn-sm btn-info me-1"	title="Voir">
																		<i	class="fas fa-eye"></i>
																	</a>
																	{% if is_granted('EDIT', task) %}
																		<a	href="{{ path('app_task_edit', {'id': task.id}) }}"	class="btn btn-sm btn-warning me-1"	title="Modifier">
																			<i	class="fas fa-edit"></i>
																		</a>
																	{% endif %}
																	{% if not task.assignedUser and is_granted('ROLE_USER') %}
																		<button	class="btn btn-sm btn-primary me-1 btn-self-assign"	title="S'assigner"	data-task-id="{{ task.id }}">
																			<i	class="fas fa-user-check"></i>
																		</button>
																	{% endif %}
																	{% if is_granted('ROLE_CHEF_PROJET') %}
																		<button	class="btn btn-sm btn-secondary me-1 btn-assign"	title="Assigner"	data-task-id="{{ task.id }}"	data-bs-toggle="modal"	data-bs-target="#assign-modal">
																			<i	class="fas fa-user-plus"></i>
																		</button>
																	{% endif %}
																	{% if is_granted('DELETE', task) %}
																		<form	method="post"	action="{{ path('app_task_delete', {'id': task.id}) }}"	onsubmit="return confirm('Êtes-vous sûr de vouloir supprimer cette tâche?');"	style="display: inline-block;">
																			<input	type="hidden"	name="_token"	value="{{ csrf_token('delete' ~ task.id) }}">
																				<button	class="btn btn-sm btn-danger"	title="Supprimer">
																					<i	class="fas fa-trash"></i>
																				</button>
																			</form>
																		{% endif %}
																		{% if task.statut != 'TERMINE' and (task.assignedUser == app.user or is_granted('ROLE_CHEF_PROJET')) %}
																			<button	class="btn btn-sm btn-success me-1 btn-complete-task"	title="Marquer comme terminée"	data-task-id="{{ task.id }}">
																				<i	class="fas fa-check"></i>
																			</button>
																		{% endif %}
																	</div>
																</td>
															</tbody>
														</tr>
													{% else %}
														<tr>
															<td	colspan="7"	class="text-center py-4">
																<div	class="empty-state">
																	<i	class="fas fa-tasks fa-3x text-muted mb-3"></i>
																	<h4>
																		Aucune tâche trouvée
																	</h4>
																	<p	class="text-muted">
																		Vous n'avez aucune tâche assignée pour le moment.
																	</p>
																	{% if is_granted('ROLE_CHEF_PROJET') %}
																		<a	href="{{ path('app_task_new') }}"	class="btn btn-primary mt-2">
																			<i	class="fas fa-plus"></i>
																			Créer une tâche
																		</a>
																	{% endif %}
																</div>
															</td>
														</tr>
													{% endfor %}
												</tbody>
											</table>
										</div>
									</div>
								</div>
								{% if pagination is defined and pagination.pages > 1 %}
									<div	class="d-flex justify-content-center mt-4">
										<nav>
											<ul	class="pagination">
												{% if pagination.current > 1 %}
													<li	class="page-item">
														<a	class="page-link"	href="{{ path('app_task_index', {page: 1}) }}">
															<i	class="fas fa-angle-double-left"></i>
														</a>
													</li>
													<li	class="page-item">
														<a	class="page-link"	href="{{ path('app_task_index', {page: pagination.current - 1}) }}">
															<i	class="fas fa-angle-left"></i>
														</a>
													</li>
												{% else %}
													<li	class="page-item disabled">
														<span	class="page-link">
															<i	class="fas fa-angle-double-left"></i>
														</span>
													</li>
													<li	class="page-item disabled">
														<span	class="page-link">
															<i	class="fas fa-angle-left"></i>
														</span>
													</li>
												{% endif %}
												{% for i in max(1, pagination.current - 2)..min(pagination.pages, pagination.current + 2) %}
													<li	class="page-item {{ pagination.current == i ? 'active' : '' }}">
														<a	class="page-link"	href="{{ path('app_task_index', {page: i}) }}">
															{{ i }}
														</a>
													</li>
												{% endfor %}
												{% if pagination.current < pagination.pages %}
													<li	class="page-item">
														<a	class="page-link"	href="{{ path('app_task_index', {page: pagination.current + 1}) }}">
															<i	class="fas fa-angle-right"></i>
														</a>
													</li>
													<li	class="page-item">
														<a	class="page-link"	href="{{ path('app_task_index', {page: pagination.pages}) }}">
															<i	class="fas fa-angle-double-right"></i>
														</a>
													</li>
												{% else %}
													<li	class="page-item disabled">
														<span	class="page-link">
															<i	class="fas fa-angle-right"></i>
														</span>
													</li>
													<li	class="page-item disabled">
														<span	class="page-link">
															<i	class="fas fa-angle-double-right"></i>
														</span>
													</li>
												{% endif %}
											</ul>
										</nav>
									</div>
								{% endif %}{# Modal pour assigner un utilisateur #}<div	class="modal fade"	id="assign-modal"	tabindex="-1"	aria-hidden="true">
									<div	class="modal-dialog">
										<div	class="modal-content">
											<div	class="modal-header">
												<h5	class="modal-title">
													Assigner un utilisateur
												</h5>
												<button	type="button"	class="btn-close"	data-bs-dismiss="modal"	aria-label="Fermer"></button>
											</div>
											<div	class="modal-body">
												<div	class="form-group mb-3">
													<input	type="text"	class="form-control"	id="user-search"	placeholder="Rechercher un utilisateur..."></div>
													<div	class="user-list">
														<div	class="text-center py-4">
															<div	class="spinner"></div>
															<p	class="text-muted mt-2">
																Chargement des utilisateurs...
															</p>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>
								</div>
								<script>
		
		document.addEventListener('DOMContentLoaded', function() {
		    // Logique pour l'auto-assignation
		    document.querySelectorAll('.btn-self-assign').forEach(button => {
		        button.addEventListener('click', function() {
		            const taskId = this.dataset.taskId;
		            
		            fetch(`/api/task/${taskId}/assign-self`, {
		                method: 'POST',
		                headers: {
		                    'Content-Type': 'application/json',
		                    'X-Requested-With': 'XMLHttpRequest',
		                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.content || ''
		                }
		            })
		            .then(response => response.json())
		            .then(data => {
		                if (data.success) {
		                    showToast('Tâche assignée avec succès', 'success');
		                    setTimeout(() => window.location.reload(), 1000);
		                } else {
		                    showToast(data.message || 'Erreur lors de l\'assignation', 'error');
		                }
		            })
		            .catch(error => {
		                console.error('Erreur:', error);
		                showToast('Erreur lors de l\'assignation', 'error');
		            });
		        });
		    });
		    
		    // Logique pour marquer une tâche comme terminée
		    document.querySelectorAll('.btn-complete-task').forEach(button => {
		        button.addEventListener('click', function() {
		            const taskId = this.dataset.taskId;
		            
		            fetch(`/api/task/${taskId}/complete`, {
		                method: 'POST',
		                headers: {
		                    'Content-Type': 'application/json',
		                    'X-Requested-With': 'XMLHttpRequest',
		                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.content || ''
		                }
		            })
		            .then(response => response.json())
		            .then(data => {
		                if (data.success) {
		                    showToast('Tâche marquée comme terminée', 'success');
		                    setTimeout(() => window.location.reload(), 1000);
		                } else {
		                    showToast(data.message || 'Erreur lors de la mise à jour', 'error');
		                }
		            })
		            .catch(error => {
		                console.error('Erreur:', error);
		                showToast('Erreur lors de la mise à jour', 'error');
		            });
		        });
		    });
		    
		    // Modal d'assignation d'utilisateur
		    const assignModal = document.getElementById('assign-modal');
		    if (assignModal) {
		        assignModal.addEventListener('show.bs.modal', function(event) {
		            const button = event.relatedTarget;
		            const taskId = button.dataset.taskId;
		            
		            const userList = this.querySelector('.user-list');
		            userList.innerHTML = '<div class="text-center py-4"><div class="spinner"></div><p class="text-muted mt-2">Chargement des utilisateurs...</p></div>';
		            
		            fetch(`/api/users/available?task=${taskId}`, {
		                headers: {
		                    'X-Requested-With': 'XMLHttpRequest'
		                }
		            })
		            .then(response => response.json())
		            .then(data => {
		                userList.innerHTML = '';
		                
		                if (data.users && data.users.length > 0) {
		                    data.users.forEach(user => {
		                        userList.innerHTML += `
		                            <div class="user-item" data-user-id="${user.id}" data-task-id="${taskId}">
		                                <div class="user-avatar">${user.initials}</div>
		                                <div class="user-info">
		                                    <div class="user-name">${user.name}</div>
		                                    <div class="user-email">${user.email}</div>
		                                </div>
		                            </div>
		                        `;
		                    });
		                    
		                    // Option pour désassigner
		                    userList.innerHTML += `
		                        <div class="user-item unassign" data-user-id="0" data-task-id="${taskId}">
		                            <div class="user-avatar"><i class="fas fa-user-slash"></i></div>
		                            <div class="user-info">
		                                <div class="user-name">Désassigner</div>
		                                <div class="user-email">Retirer l'utilisateur de cette tâche</div>
		                            </div>
		                        </div>
		                    `;
		                    
		                    // Ajouter les événements
		                    document.querySelectorAll('.user-item').forEach(item => {
		                        item.addEventListener('click', function() {
		                            const userId = this.dataset.userId;
		                            const taskId = this.dataset.taskId;
		                            
		                            fetch(`/api/task/${taskId}/assign`, {
		                                method: 'POST',
		                                headers: {
		                                    'Content-Type': 'application/json',
		                                    'X-Requested-With': 'XMLHttpRequest',
		                                    'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]')?.content || ''
		                                },
		                                body: JSON.stringify({ userId: userId })
		                            })
		                            .then(response => response.json())
		                            .then(data => {
		                                if (data.success) {
		                                    // Fermer le modal
		                                    bootstrap.Modal.getInstance(assignModal).hide();
		                                    
		                                    showToast(userId === '0' ? 'Tâche désassignée' : 'Tâche assignée', 'success');
		                                    setTimeout(() => window.location.reload(), 1000);
		                                } else {
		                                    showToast(data.message || 'Erreur lors de l\'assignation', 'error');
		                                }
		                            })
		                            .catch(error => {
		                                console.error('Erreur:', error);
		                                showToast('Erreur lors de l\'assignation', 'error');
		                            });
		                        });
		                    });
		                    
		                    // Logique de recherche
		                    const searchInput = document.getElementById('user-search');
		                    if (searchInput) {
		                        searchInput.addEventListener('keyup', function() {
		                            const value = this.value.toLowerCase();
		                            
		                            document.querySelectorAll('.user-item').forEach(item => {
		                                const name = item.querySelector('.user-name').textContent.toLowerCase();
		                                const email = item.querySelector('.user-email').textContent.toLowerCase();
		                                
		                                if (name.includes(value) || email.includes(value) || item.classList.contains('unassign')) {
		                                    item.style.display = '';
		                                } else {
		                                    item.style.display = 'none';
		                                }
		                            });
		                        });
		                    }
		                } else {
		                    userList.innerHTML = '<div class="text-center py-3 text-muted">Aucun utilisateur disponible</div>';
		                }
		            })
		            .catch(error => {
		                console.error('Erreur:', error);
		                userList.innerHTML = '<div class="text-center py-3 text-danger">Erreur lors du chargement des utilisateurs</div>';
		            });
		        });
		    }
		});
		</script>
							{% endblock %}
							{# Version 1 >01/07/2025 #}
							{# {% block title %}Toutes les tâches{% endblock %}
								
								{% block stylesheets %}
								{{ parent() }}
								<style>
								.task-filters {
								background: #f8f9fa;
								padding: 15px;
								border-radius: 8px;
								margin-bottom: 20px;
								}
								.priority-high { border-left: 4px solid #dc3545; }
								.priority-medium { border-left: 4px solid #ffc107; }
								.priority-low { border-left: 4px solid #28a745; }
								</style>
								{% endblock %}
								
								{% block body %}
								<div class="container-fluid">
								<div class="d-flex justify-content-between align-items-center mb-4">
								<h1><i class="fas fa-tasks"></i> Toutes les tâches</h1>
								
								{% if is_granted('ROLE_USER') %}
								<a href="{{ path('app_task_new') }}" class="btn btn-primary">
								<i class="fas fa-plus"></i> Nouvelle tâche
								</a>
								{% endif %}
								</div>
								
								<!-- Filtres -->
								<div class="task-filters">
								<div class="row">
								<div class="col-md-3">
								<select class="form-select" id="statutFilter">
								<option value="">Tous les statuts</option>
								<option value="todo">À faire</option>
								<option value="in_progress">En cours</option>
								<option value="review">En révision</option>
								<option value="done">Terminé</option>
								</select>
								</div>
								<div class="col-md-3">
								<select class="form-select" id="priorityFilter">
								<option value="">Toutes les priorités</option>
								<option value="high">Élevée</option>
								<option value="medium">Moyenne</option>
								<option value="low">Faible</option>
								</select>
								</div>
								<div class="col-md-3">
								<input type="text" class="form-control" id="searchFilter" placeholder="Rechercher...">
								</div>
								<div class="col-md-3">
								<button class="btn btn-outline-secondary" onclick="clearFilters()">
								<i class="fas fa-times"></i> Réinitialiser
								</button>
								</div>
								</div>
								</div>
								
								{% if tasks|length > 0 %}
								<div class="table-responsive">
								<table class="table table-hover" id="tasksTable">
								<thead class="table-light">
								<tr>
								<th>Titre</th>
								<th>Projet / Colonne</th>
								<th>Assigné à</th>
								<th>Priorité</th>
								<th>Statut</th>
								<th>Échéance</th>
								<th>Actions</th>
								</tr>
								</thead>
								<tbody>
								{% for task in tasks %}
								<tr class="task-row priority-{{ task.priority|lower }}"
								data-statut="{{ task.statut }}"
								data-priority="{{ task.priority }}"
								data-search="{{ task.title|lower }} {{ task.description|lower }}">
								<td>
								<a href="{{ path('app_task_show', {id: task.id}) }}" class="text-decoration-none">
								<strong>{{ task.title }}</strong>
								</a>
								{% if task.description %}
								<br><small class="text-muted">{{ task.description|slice(0, 50) }}...</small>
								{% endif %}
								</td>
								<td>
								{% if task.taskList %}
								<small class="text-muted">{{ task.taskList.project.name }}</small><br>
								<a href="{{ path('app_tasklist_show', {id: task.taskList.id}) }}">{{ task.taskList.name }}</a>
								{% else %}
								<span class="text-muted">Non assigné</span>
								{% endif %}
								</td>
								<td>{{ task.assignedUser ? task.assignedUser.email : 'Non assigné' }}</td>
								<td>
								{% if task.priority %}
								<span class="badge bg-{{ task.priority == 'high' ? 'danger' : (task.priority == 'medium' ? 'warning' : 'success') }}">
								{{ task.priority == 'high' ? 'Élevée' : (task.priority == 'medium' ? 'Moyenne' : 'Faible') }}
								</span>
								{% endif %}
								</td>
								<td>
								<span class="badge bg-{{ task.statut == 'done' ? 'success' : (task.statut == 'in_progress' ? 'primary' : 'secondary') }}">
								{% if task.statut == 'todo' %}À faire
								{% elseif task.statut == 'in_progress' %}En cours
								{% elseif task.statut == 'review' %}En révision
								{% elseif task.statut == 'done' %}Terminé
								{% else %}{{ task.statut }}
								{% endif %}
								</span>
								</td>
								<td>
								{% if task.dueDate %}
								<span class="{{ task.dueDate < date() ? 'text-danger' : '' }}">
								{{ task.dueDate|date('d/m/Y') }}
								</span>
								{% else %}
								<span class="text-muted">-</span>
								{% endif %}
								</td>
								<td>
								<div class="btn-group btn-group-sm">
								<a href="{{ path('app_task_show', {id: task.id}) }}" class="btn btn-outline-primary">
								<i class="fas fa-eye"></i>
								</a>
								{% if is_granted('TASK_EDIT', task) %}
								<a href="{{ path('app_task_edit', {id: task.id}) }}" class="btn btn-outline-warning">
								<i class="fas fa-edit"></i>
								</a>
								{% endif %}
								</div>
								</td>
								</tr>
								{% endfor %}
								</tbody>
								</table>
								</div>
								{% else %}
								<div class="text-center py-5">
								<i class="fas fa-tasks fa-4x text-muted mb-3"></i>
								<h3 class="text-muted">Aucune tâche</h3>
								<p class="text-muted">Commencez par créer votre première tâche.</p>
								{% if is_granted('ROLE_USER') %}
								<a href="{{ path('app_task_new') }}" class="btn btn-primary">
								<i class="fas fa-plus"></i> Créer une tâche
								</a>
								{% endif %}
								</div>
								{% endif %}
								</div>
								{% endblock %}
								
								{% block javascripts %}
								{{ parent() }}
								<script>
								// Filtrage des tâches
								function filterTasks() {
								const statutFilter = document.getElementById('statutFilter').value;
								const priorityFilter = document.getElementById('priorityFilter').value;
								const searchFilter = document.getElementById('searchFilter').value.toLowerCase();
								
								const rows = document.querySelectorAll('.task-row');
								
								rows.forEach(row => {
								const statut = row.dataset.statut;
								const priority = row.dataset.priority;
								const searchText = row.dataset.search;
								
								let show = true;
								
								if (statutFilter && statut !== statutFilter) show = false;
								if (priorityFilter && priority !== priorityFilter) show = false;
								if (searchFilter && !searchText.includes(searchFilter)) show = false;
								
								row.style.display = show ? '' : 'none';
								});
								}
								
								function clearFilters() {
								document.getElementById('statutFilter').value = '';
								document.getElementById('priorityFilter').value = '';
								document.getElementById('searchFilter').value = '';
								filterTasks();
								}
								
								// Événements
								document.getElementById('statutFilter').addEventListener('change', filterTasks);
								document.getElementById('priorityFilter').addEventListener('change', filterTasks);
								document.getElementById('searchFilter').addEventListener('input', filterTasks);
							</script>{% endblock %}#}
							