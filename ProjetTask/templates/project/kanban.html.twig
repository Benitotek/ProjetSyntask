{% extends 'base.html.twig' %}

{% block title %}{{ project.titre }} - Kanban{% endblock %}

{% block body %}
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h1><i class="fas fa-columns"></i> {{ project.titre }}</h1>
        <p class="text-muted">{{ project.description }}</p>
    </div>
    <div>
        {% if is_granted('edit', project) %}
        <button class="btn btn-outline-primary" data-bs-toggle="modal" data-bs-target="#addColumnModal">
            <i class="fas fa-plus"></i> Ajouter une colonne
        </button>
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addTaskModal">
            <i class="fas fa-plus"></i> Ajouter une tâche
        </button>
        {% endif %}
    </div>
</div>

<div class="kanban-board" id="kanban-board">
    {% for taskList in project.taskLists %}
    <div class="kanban-column" data-column-id="{{ taskList.id }}">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h5>{{ taskList.name }}</h5>
            {% if is_granted('edit', project) %}
            <div class="dropdown">
                <button class="btn btn-sm btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown">
                    <i class="fas fa-ellipsis-v"></i>
                </button>
                <ul class="dropdown-menu">
                    <li><a class="dropdown-item" href="#" data-action="edit-column" data-id="{{ taskList.id }}">
                        <i class="fas fa-edit"></i> Modifier
                    </a></li>
                    <li><a class="dropdown-item text-danger" href="#" data-action="delete-column" data-id="{{ taskList.id }}">
                        <i class="fas fa-trash"></i> Supprimer
                    </a></li>
                </ul>
            </div>
            {% endif %}
        </div>
        
        <div class="kanban-tasks" data-column-id="{{ taskList.id }}">
            {% for task in taskList.tasks %}
            <div class="kanban-card {{ task.priorityClass }} {{ task.statusClass }} {{ task.isOverdue ? 'task-overdue' : '' }}" 
                 data-task-id="{{ task.id }}" data-column-id="{{ taskList.id }}">
                <div class="d-flex justify-content-between align-items-start mb-2">
                    <h6 class="mb-0">{{ task.titre }}</h6>
                    {% if is_granted('edit', project) %}
                    <div class="dropdown">
                        <button class="btn btn-sm btn-link p-0" data-bs-toggle="dropdown">
                            <i class="fas fa-ellipsis-v"></i>
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="{{ path('app_task_edit', {id: task.id}) }}">
                                <i class="fas fa-edit"></i> Modifier
                            </a></li>
                        </ul>
                    </div>
                    {% endif %}
                </div>
                
                {% if task.description %}
                <p class="small text-muted mb-2">{{ task.description|length > 50 ? task.description|slice(0, 50) ~ '...' : task.description }}</p>
                {% endif %}
                
                <div class="d-flex justify-content-between align-items-center">
                    <div>
                        <span class="badge bg-{{ task.priorite == 'URGENT' ? 'danger' : (task.priorite == 'NORMAL' ? 'primary' : 'secondary') }}">
                            {{ task.priorite }}
                        </span>
                        {% if task.assignedUsers|length > 0 %}
                        <span class="badge bg-light text-dark">
                            <i class="fas fa-user"></i> {{ task.assignedUsers|length }}
                        </span>
                        {% endif %}
                    </div>
                    {% if task.dateDeFin %}
                    <small class="text-muted {{ task.isOverdue ? 'text-danger' : '' }}">
                        <i class="fas fa-clock"></i> {{ task.dateDeFin|date('d/m') }}
                    </small>
                    {% endif %}
                </div>
                
                {% if is_granted('ROLE_EMPLOYE') and task.assignedUsers.contains(app.user) %}
                <div class="mt-2">
                    <select class="form-select form-select-sm task-status-select" data-task-id="{{ task.id }}">
                        <option value="EN-ATTENTE" {{ task.statut == 'EN-ATTENTE' ? 'selected' : '' }}>En attente</option>
                        <option value="EN-COURS" {{ task.statut == 'EN-COURS' ? 'selected' : '' }}>En cours</option>
                        <option value="TERMINE" {{ task.statut == 'TERMINE' ? 'selected' : '' }}>Terminé</option>
                    </select>
                </div>
                {% endif %}
            </div>
            {% endfor %}
        </div>
    </div>
    {% endfor %}
</div>

{% if is_granted('edit', project) %}
{# Modals pour ajouter colonne et tâche #}
<div class="modal fade" id="addColumnModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Ajouter une colonne</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="addColumnForm">
                    <div class="mb-3">
                        <label for="columnName" class="form-label">Nom de la colonne</label>
                        <input type="text" class="form-control" id="columnName" name="name" required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annuler</button>
                <button type="button" class="btn btn-primary" onclick="addColumn()">Ajouter</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="addTaskModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Ajouter une tâche</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <a href="{{ path('app_task_new', {projectId: project.id}) }}" class="btn btn-primary">
                    Créer une nouvelle tâche
                </a>
            </div>
        </div>
    </div>
</div>
{% endif %}
{% endblock %}

{% block javascripts %}
<script>
// Initialiser Sortable pour le drag & drop
document.addEventListener('DOMContentLoaded', function() {
    const columns = document.querySelectorAll('.kanban-tasks');
    
    columns.forEach(column => {
        new Sortable(column, {
            group: 'kanban',
            animation: 150,
            onEnd: function(evt) {
                const taskId = evt.item.getAttribute('data-task-id');
                const newColumnId = evt.to.getAttribute('data-column-id');
                const newPosition = evt.newIndex;
                
                // Envoyer la mise à jour au serveur
                fetch(`/tasks/${taskId}/move`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        columnId: newColumnId,
                        position: newPosition
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (!data.success) {
                        console.error('Erreur lors du déplacement de la tâche');
                        // Remettre l'élément à sa position originale
                        evt.from.insertBefore(evt.item, evt.from.children[evt.oldIndex]);
                    }
                });
            }
        });
    });
    
    // Gestion du changement de statut des tâches
    document.querySelectorAll('.task-status-select').forEach(select => {
        select.addEventListener('change', function() {
            const taskId = this.getAttribute('data-task-id');
            const newStatus = this.value;
            
            fetch(`/tasks/${taskId}/update-status`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                },
                body: `status=${newStatus}`
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Mettre à jour la classe CSS de la carte
                    const card = this.closest('.kanban-card');
                    card.className = card.className.replace(/status-\w+/g, '');
                    
                    if (newStatus === 'EN-ATTENTE') card.classList.add('status-pending');
                    else if (newStatus === 'EN-COURS') card.classList.add('status-progress');
                    else if (newStatus === 'TERMINE') card.classList.add('status-completed');
                } else {
                    alert('Erreur lors de la mise à jour du statut');
                }
            });
        });
    });
});

{% if is_granted('edit', project) %}
function addColumn() {
    const form = document.getElementById('addColumnForm');
    const formData = new FormData(form);
    
    fetch(`/task-lists/new/{{ project.id }}`, {
        method: 'POST',
        body: formData
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            location.reload();
        } else {
            alert('Erreur lors de la création de la colonne');
        }
    });
}
{% endif %}
</script>
{% endblock %}